import { ref, computed } from 'vue'
import { lmsService } from '@/modules/lms/js/lmsService'

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ)
const showSuccess = (message) => {
    console.log('‚úÖ –£—Å–ø–µ—Ö:', message)
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

const showError = (message) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', message)
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

export function useLessonItems() {
    const items = ref([])
    const loading = ref(false)
    const error = ref(null)

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞
    const fetchLessonItems = async (lessonId) => {
        if (!lessonId) {
            items.value = []
            return
        }

        loading.value = true
        error.value = null

        try {
            const data = await lmsService.getLessonItems(lessonId)
            items.value = data
            console.log('üìö –≠–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data)
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞:', err)
            error.value = err.message
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞')
            items.value = []
        } finally {
            loading.value = false
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞
    const reorderItems = async (reorderData) => {
        loading.value = true

        try {
            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞:', reorderData)

            const data = await lmsService.reorderLessonItems(reorderData)
            console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', data)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (data.items) {
                items.value = data.items
            }
            
            showSuccess('–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω')
            return data
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞:', err)
            showError(`–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: ${err.message}`)
            throw err
        } finally {
            loading.value = false
        }
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const migrateExistingItems = async () => {
        loading.value = true

        try {
            console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...')

            const data = await lmsService.migrateLessonItems()
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data)
            
            showSuccess(`–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ ${data.created_count} –∑–∞–ø–∏—Å–µ–π`)
            return data
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err)
            showError(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${err.message}`)
            throw err
        } finally {
            loading.value = false
        }
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/–∞–Ω–∞–ª–∏–∑–∞)
    const itemsByType = computed(() => {
        const grouped = {
            tests: [],
            assignments: [],
            resources: []
        }

        items.value.forEach(item => {
            switch (item.item_type) {
                case 'test':
                    grouped.tests.push(item)
                    break
                case 'assignment':
                    grouped.assignments.push(item)
                    break
                case 'resource':
                    grouped.resources.push(item)
                    break
            }
        })

        return grouped
    })

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const itemsStats = computed(() => ({
        total: items.value.length,
        tests: items.value.filter(item => item.item_type === 'test').length,
        assignments: items.value.filter(item => item.item_type === 'assignment').length,
        resources: items.value.filter(item => item.item_type === 'resource').length
    }))

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const clearItems = () => {
        items.value = []
        error.value = null
    }

    return {
        // –î–∞–Ω–Ω—ã–µ
        items,
        loading,
        error,
        itemsByType,
        itemsStats,

        // –ú–µ—Ç–æ–¥—ã
        fetchLessonItems,
        reorderItems,
        migrateExistingItems,
        clearItems
    }
} 