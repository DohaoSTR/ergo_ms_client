import { routesReader } from './routes-reader.js'
import { lmStudioClient } from './lm-studio-client.js'

class SmartNavigation {
    constructor() {
        this.allRoutes = []
        this.initialized = false
        this.llmAvailable = false
        this.lastLLMCheck = null
        this.llmCheckInterval = 30000
    }

    async checkLLMAvailability(forceCheck = false) {
        const now = Date.now()
        const cacheTimeout = 5000 // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥

        if (!forceCheck && this.lastLLMCheck && (now - this.lastLLMCheck) < cacheTimeout) {
            return this.llmAvailable
        }

        try {
            const connectionResult = await lmStudioClient.checkConnection()
            this.llmAvailable = connectionResult.connected
            this.lastLLMCheck = now

            // –ï—Å–ª–∏ checkConnection –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!this.llmAvailable) {
                try {
                    const testResult = await lmStudioClient.sendMessage("test", "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    if (testResult.success) {
                        this.llmAvailable = true
                    }
                } catch {
                    this.llmAvailable = false
                }
            }

        } catch {
            // –ï—Å–ª–∏ checkConnection –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                const testResult = await lmStudioClient.sendMessage("test", "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                if (testResult.success) {
                    this.llmAvailable = true
                } else {
                    this.llmAvailable = false
                }
            } catch {
                this.llmAvailable = false
            }
            this.lastLLMCheck = now
        }

        return this.llmAvailable
    }

    async initialize() {
        if (this.initialized) return

        await routesReader.initialize()
        this.allRoutes = routesReader.getAllRoutes()

        if (this.allRoutes.length === 0) {
            routesReader.initialized = false
            routesReader.routesCache = null
            await routesReader.initialize()
            this.allRoutes = routesReader.getAllRoutes()
        }

        this.initialized = true
        await this.checkLLMAvailability(true)
    }

    async analyzeNavigationRequest(userRequest) {
        await this.initialize()

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM
        console.log('üîç Navigation Analysis for:', userRequest)
        const llmResult = await this.llmRouteAnalysis(userRequest)
        console.log('üìù LLM result:', llmResult)
        return llmResult
    }

    basicNavigationFallback(userRequest) {
        if (!this.allRoutes || this.allRoutes.length === 0) {
            return {
                success: false,
                confidence: 0,
                route: null,
                message: `–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
                reasoning: '–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
                alternatives: [],
                method: 'no_routes'
            }
        }

        // –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ - –ø—É—Å—Ç—å LLM —Å–∞–º –¥—É–º–∞–µ—Ç
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        const alternatives = this.allRoutes.slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–∞—Ä—à—Ä—É—Ç–æ–≤

        return {
            success: false,
            confidence: 0,
            route: null,
            message: `LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ "${userRequest}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.`,
            reasoning: 'LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã',
            alternatives: alternatives,
            method: 'llm_unavailable'
        }
    }

    async llmRouteAnalysis(userRequest) {
        const routesList = this.prepareRoutesForLLM()
        const prompt = this.buildNavigationPrompt(userRequest, routesList)
        const response = await lmStudioClient.sendMessage(userRequest, prompt)

        if (response.success) {
            const parsedResult = this.parseLLMResponse(response.message, userRequest)
            return parsedResult
        } else {
            return {
                success: false,
                confidence: 0,
                route: null,
                message: `LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                reasoning: '–û—à–∏–±–∫–∞ LLM',
                alternatives: [],
                method: 'llm_error'
            }
        }
    }

    prepareRoutesForLLM() {
        if (!this.allRoutes || this.allRoutes.length === 0) {
            return []
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const filteredRoutes = this.allRoutes
            .filter(route => {
                if (!route || !route.name || !route.path) return false
                // –ò—Å–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (:id, :slug –∏ —Ç.–¥.)
                return !route.path.includes(':')
            })
            .map(route => ({
                name: route.name,
                path: route.path
            }))

        return filteredRoutes
    }

    buildNavigationPrompt(userRequest, routesList) {
        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä—à—Ä—É—Ç.

–ó–ê–ü–†–û–°: "${userRequest}"

–î–û–°–¢–£–ü–ù–´–ï –ú–ê–†–®–†–£–¢–´:
${routesList.map(route => `${route.name}: ${route.path}`).join('\n')}

–í–ê–ñ–ù–û:
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ "–ø—Ä–æ—Ñ–∏–ª—å" –º–æ–∂–µ—Ç –±—ã—Ç—å: Account (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å) –∏–ª–∏ ProfilePage (–ø—Ä–æ—Ñ–∏–ª—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ) - –ü–ï–†–ï–°–ü–†–û–°–ò
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –ü–ï–†–ï–°–ü–†–û–°–ò  
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—Ç–æ—á–Ω–∏
- –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.85) —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 100% —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
- –õ—É—á—à–µ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å, —á–µ–º –æ—à–∏–±–∏—Ç—å—Å—è

–û–¢–í–ï–¢–¨ –¢–û–õ–¨–ö–û JSON:
{
  "routeName": "–∏–º—è_–º–∞—Ä—à—Ä—É—Ç–∞_–∏–ª–∏_null",
  "confidence": 0.1-1.0,
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ_–∏–ª–∏_–≤–æ–ø—Ä–æ—Å_–¥–ª—è_—É—Ç–æ—á–Ω–µ–Ω–∏—è",
  "needsClarification": true_–µ—Å–ª–∏_–Ω—É–∂–Ω–æ_—É—Ç–æ—á–Ω–∏—Ç—å
}`

        return prompt
    }

    parseLLMResponse(response, userRequest) {
        try {
            let cleanResponse = response.trim()
            cleanResponse = cleanResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '')

            const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/)
            if (!jsonMatch) {
                throw new Error('No JSON found in LLM response')
            }

            const jsonString = jsonMatch[0]
            const data = JSON.parse(jsonString)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 0.85)
            if (data.needsClarification || data.confidence < 0.85 || !data.routeName || data.routeName === 'null') {
                return {
                    success: false,
                    confidence: data.confidence || 0,
                    route: null,
                    message: `–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ${data.reasoning}`,
                    reasoning: '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    alternatives: [],
                    method: 'clarification_needed'
                }
            }

            // –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            let route = this.allRoutes.find(r => r.name === data.routeName)

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            if (!route) {
                route = this.allRoutes.find(r =>
                    r.name && r.name.toLowerCase() === data.routeName.toLowerCase()
                )
            }

            if (!route) {
                return {
                    success: false,
                    confidence: data.confidence || 0,
                    route: null,
                    message: `–ú–∞—Ä—à—Ä—É—Ç "${data.routeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. ${data.reasoning}`,
                    reasoning: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    alternatives: [],
                    method: 'route_not_found'
                }
            }

            const result = {
                success: true,
                confidence: data.confidence || 0,
                route: route,
                message: `–ü–µ—Ä–µ—Ö–æ–∂—É: ${this.getRouteDisplayName(route)}`,
                reasoning: data.reasoning || 'LLM –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
                alternatives: [],
                method: 'llm'
            }

            return result

        } catch (error) {
            return {
                success: false,
                confidence: 0,
                route: null,
                message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ LLM',
                reasoning: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`,
                method: 'llm_parse_failed',
                alternatives: []
            }
        }
    }

    parseAlternatives(alternativeNames) {
        return alternativeNames
            .map(name => this.allRoutes.find(r => r.name === name))
            .filter(route => route !== undefined)
    }

    getRouteDisplayName(route) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã - –ø—É—Å—Ç—å LLM —Å–∞–º–∞ –¥—É–º–∞–µ—Ç
        return route.meta?.title || route.name || route.path
    }

    getAnalysisStats() {
        return {
            totalRoutes: this.allRoutes.length,
            initialized: this.initialized,
            routeCategories: this.getRouteCategories(),
            analysisMethod: this.llmAvailable ? 'llm_only' : 'llm_unavailable',
            llmAvailable: this.llmAvailable,
            lastLLMCheck: this.lastLLMCheck
        }
    }

    getRouteCategories() {
        const categories = { '–û–±—â–µ–µ': this.allRoutes.length }
        return categories
    }
}

export const smartNavigation = new SmartNavigation()
export default SmartNavigation 