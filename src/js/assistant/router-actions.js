import router from '@/js/routers.js'
import axios from 'axios'

class RouterActions {
    constructor() {
        this.router = router
        this.cachedRoutes = null
        this.cacheTimestamp = null
        this.cacheTimeout = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    }

    async fetchRoutesFromAPI() {
        try {
            const response = await axios.get('/api/cms/get-routes-paths/')
            const data = response.data

            if (data.routes && Array.isArray(data.routes)) {
                return data.routes.map(route => ({
                    name: route.name,
                    path: route.path,
                    title: route.title,
                    meta: { title: route.title }
                }))
            }

            return []
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ API:', error)
            return this.getFallbackRoutes()
        }
    }

    getFallbackRoutes() {
        return [
            { name: 'Account', path: '/user/account', title: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' },
            { name: 'Settings', path: '/settings', title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
            { name: 'SecuritySettings', path: '/user/security', title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' },
            { name: 'UsersPanel', path: '/admin-panel/users', title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
            { name: 'AdminPanel', path: '/admin-panel', title: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' },
            { name: 'GroupsPanel', path: '/admin-panel/groups', title: '–ì—Ä—É–ø–ø—ã' },
            { name: 'CategoriesPanel', path: '/admin-panel/categories', title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
            { name: 'BI', path: '/bi', title: '–ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞' },
            { name: 'CRM', path: '/crm', title: 'CRM' },
            { name: 'LMS', path: '/lms', title: 'LMS' },
            { name: 'ExpertSystem', path: '/expert-system', title: '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' },
            { name: 'DatabaseAnalyze', path: '/user/analyze/databaseanalyze', title: '–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
            { name: 'Analyze', path: '/user/analyze', title: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö' }
        ]
    }

    async getAvailableRoutes() {
        const now = Date.now()

        if (this.cachedRoutes && this.cacheTimestamp && (now - this.cacheTimestamp < this.cacheTimeout)) {
            return this.cachedRoutes
        }

        try {
            const apiRoutes = await this.fetchRoutesFromAPI()
            const routerRoutes = this.router.getRoutes()

            const combinedRoutes = []
            const seenRoutes = new Set()

            apiRoutes.forEach(route => {
                if (!seenRoutes.has(route.name)) {
                    combinedRoutes.push(route)
                    seenRoutes.add(route.name)
                }
            })

            routerRoutes.forEach(route => {
                if (route.name && !seenRoutes.has(route.name)) {
                    combinedRoutes.push({
                        name: route.name,
                        path: route.path,
                        title: route.meta?.title || route.name,
                        meta: route.meta
                    })
                    seenRoutes.add(route.name)
                }
            })

            this.cachedRoutes = combinedRoutes
            this.cacheTimestamp = now

            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ API:', combinedRoutes.length, '–º–∞—Ä—à—Ä—É—Ç–æ–≤')
            return this.cachedRoutes

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error)

            if (this.cachedRoutes) {
                return this.cachedRoutes
            }

            return this.getFallbackRoutes()
        }
    }

    getCurrentRoute() {
        return {
            path: this.router.currentRoute.value.path,
            name: this.router.currentRoute.value.name,
            meta: this.router.currentRoute.value.meta,
            params: this.router.currentRoute.value.params,
            query: this.router.currentRoute.value.query
        }
    }

    async navigateToRoute(routeIdentifier) {
        try {
            console.log('üîç Navigating to route:', routeIdentifier)
            const routes = await this.getAvailableRoutes()
            console.log('üìã Available routes:', routes.map(r => r.name || r.path))

            let targetRoute = null

            if (typeof routeIdentifier === 'string') {
                targetRoute = await this.smartRouteSearch(routeIdentifier)
            } else if (routeIdentifier && typeof routeIdentifier === 'object') {
                targetRoute = routeIdentifier
            }

            if (!targetRoute) {
                console.log('‚ùå Route not found:', routeIdentifier)
                return {
                    success: false,
                    error: `–ú–∞—Ä—à—Ä—É—Ç "${routeIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω`
                }
            }

            console.log('‚úÖ Found route:', targetRoute.name, targetRoute.path)

            await this.router.push(targetRoute.path)
            return {
                success: true,
                route: targetRoute
            }

        } catch (error) {
            console.error('‚ùå Navigation error:', error)
            return {
                success: false,
                error: error.message
            }
        }
    }

    findRouteByName(name) {
        const routes = this.getAvailableRoutes()
        return routes.find(route =>
            route.name === name ||
            (route.name && route.name.toLowerCase() === name.toLowerCase())
        )
    }

    findRouteByPath(path) {
        const routes = this.getAvailableRoutes()
        return routes.find(route =>
            route.path === path ||
            route.path.toLowerCase() === path.toLowerCase()
        )
    }

    async smartRouteSearch(searchTerm) {
        const routes = await this.getAvailableRoutes()
        const lowerSearchTerm = searchTerm.toLowerCase()

        console.log('üîç Smart route search for:', searchTerm)
        console.log('üìã Search in routes:', routes.map(r => r.name || r.path))

        const exactMatch = routes.find(route => route.name === searchTerm)
        if (exactMatch) {
            console.log(`‚úÖ Found exact name match: ${exactMatch.name} (${exactMatch.path})`)
            return exactMatch
        }

        const pathMatch = routes.find(route => route.path === searchTerm)
        if (pathMatch) {
            console.log(`‚úÖ Found exact path match: ${pathMatch.name} (${pathMatch.path})`)
            return pathMatch
        }

        const partialMatch = routes.find(route =>
            route.name?.toLowerCase().includes(lowerSearchTerm) ||
            route.path.toLowerCase().includes(lowerSearchTerm) ||
            route.title?.toLowerCase().includes(lowerSearchTerm)
        )

        if (partialMatch) {
            console.log(`‚úÖ Found partial match: ${partialMatch.name} (${partialMatch.path})`)
        } else {
            console.log('‚ùå No routes found')
        }

        return partialMatch
    }

    getSimilarRoutes(searchTerm, maxResults = 5) {
        const routes = this.getAvailableRoutes()
        const lowerSearchTerm = searchTerm.toLowerCase()

        const scored = routes
            .map(route => {
                let score = 0
                const routeName = (route.name || '').toLowerCase()
                const routePath = route.path.toLowerCase()

                if (routeName.includes(lowerSearchTerm) || routePath.includes(lowerSearchTerm)) {
                    score += 10
                }

                const nameDistance = this.levenshteinDistance(lowerSearchTerm, routeName)
                const pathDistance = this.levenshteinDistance(lowerSearchTerm, routePath)
                score += Math.max(0, 10 - Math.min(nameDistance, pathDistance))

                return { route, score }
            })
            .filter(item => item.score > 0)
            .sort((a, b) => b.score - a.score)
            .slice(0, maxResults)
            .map(item => item.route)

        return scored
    }

    levenshteinDistance(str1, str2) {
        const matrix = []

        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i]
        }

        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j
        }

        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1]
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    )
                }
            }
        }

        return matrix[str2.length][str1.length]
    }

    analyzeCurrentPage() {
        const currentRoute = this.getCurrentRoute()
        const analysis = {
            route: currentRoute,
            pageName: this.getPageDisplayName(currentRoute),
            breadcrumbs: this.generateBreadcrumbs(currentRoute),
            availableActions: this.getAvailablePageActions(currentRoute)
        }

        return analysis
    }

    getPageDisplayName(route) {
        const nameMapping = {
            '/': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            '/dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            '/profile': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            '/users': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
            '/settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            '/reports': '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            '/documents': '–î–æ–∫—É–º–µ–Ω—Ç—ã',
            '/tasks': '–ó–∞–¥–∞—á–∏',
            '/calendar': '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
            '/messages': '–°–æ–æ–±—â–µ–Ω–∏—è'
        }

        return nameMapping[route.path] || route.name || route.path
    }

    generateBreadcrumbs(route) {
        const pathParts = route.path.split('/').filter(part => part)
        const breadcrumbs = [{ name: '–ì–ª–∞–≤–Ω–∞—è', path: '/' }]

        let currentPath = ''
        for (const part of pathParts) {
            currentPath += `/${part}`
            breadcrumbs.push({
                name: this.getPageDisplayName({ path: currentPath }),
                path: currentPath
            })
        }

        return breadcrumbs
    }

    getAvailablePageActions(route) {
        const baseActions = [
            '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
            '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é',
            '–û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É'
        ]

        const pageSpecificActions = {
            '/profile': ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            '/users': ['–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏', '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'],
            '/settings': ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', '–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            '/documents': ['–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É', '–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º']
        }

        return [...baseActions, ...(pageSpecificActions[route.path] || [])]
    }
}

export const routerActions = new RouterActions()
export default RouterActions 