import router from '@/js/routers.js'
import { routesReader } from './routes-reader.js'
import { smartNavigation } from './smart-navigation.js'

class RouterActions {
    constructor() {
        this.router = router
        this.routeCache = new Map()
    }

    getCurrentRoute() {
        return {
            path: this.router.currentRoute.value.path,
            name: this.router.currentRoute.value.name,
            meta: this.router.currentRoute.value.meta,
            params: this.router.currentRoute.value.params,
            query: this.router.currentRoute.value.query
        }
    }

    getAvailableRoutes() {
        if (this.routeCache.has('all')) {
            return this.routeCache.get('all')
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ—É—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        const configRoutes = routesReader.getAllRoutes() || []

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ—É—Ç—ã –∏–∑ Vue Router –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const vueRoutes = this.router.getRoutes().map(route => ({
            path: route.path,
            name: route.name,
            meta: route.meta || {}
        }))

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const allRoutes = Array.isArray(configRoutes) ? [...configRoutes] : []

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã –∏–∑ Vue Router, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        vueRoutes.forEach(vueRoute => {
            const exists = allRoutes.some(configRoute =>
                configRoute.path === vueRoute.path || configRoute.name === vueRoute.name
            )
            if (!exists) {
                allRoutes.push(vueRoute)
            }
        })

        this.routeCache.set('all', allRoutes)
        return allRoutes
    }

    async navigateToRoute(routeName, params = {}, query = {}) {
        try {
            const analysisResult = await smartNavigation.analyzeNavigationRequest(routeName)

            if (analysisResult.success && analysisResult.route) {
                const currentPath = this.router.currentRoute.value.path
                const route = analysisResult.route

                try {
                    if (route.name) {
                        await this.router.push({ name: route.name, params, query })
                    } else if (route.path) {
                        await this.router.push({ path: route.path, query })
                    } else {
                        throw new Error('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ name, –Ω–∏ path')
                    }

                    const newPath = this.router.currentRoute.value.path

                    if (newPath === currentPath && route.path !== currentPath) {
                        throw new Error('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ - –ø—É—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è')
                    }

                    const routeDisplayName = smartNavigation.getRouteDisplayName(route)
                    let message = `–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${routeDisplayName}`

                    return {
                        success: true,
                        message: message,
                        route: route,
                        confidence: analysisResult.confidence,
                        method: analysisResult.method
                    }

                } catch (navigationError) {
                    const vueRoutes = this.router.getRoutes()
                    const routeExists = vueRoutes.some(vr =>
                        vr.name === route.name || vr.path === route.path
                    )

                    let errorMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫: ${smartNavigation.getRouteDisplayName(route)}`

                    if (!routeExists) {
                        errorMessage += `\n‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Vue Router`
                        errorMessage += `\nüîç –ò—Å–∫–æ–º—ã–π —Ä–æ—É—Ç: name="${route.name}", path="${route.path}"`
                    } else {
                        errorMessage += `\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${navigationError.message}`
                    }

                    if (analysisResult.alternatives?.length > 0) {
                        errorMessage += `\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:`
                        analysisResult.alternatives.slice(0, 3).forEach(alt => {
                            const altName = smartNavigation.getRouteDisplayName(alt)
                            errorMessage += `\n‚Ä¢ ${altName}`
                        })
                    }

                    return {
                        success: false,
                        message: errorMessage,
                        error: navigationError
                    }
                }
            } else {
                let message = analysisResult.method === 'basic_fallback_failed' ?
                    `–ú–∞—Ä—à—Ä—É—Ç "${routeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ (LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)` :
                    `–ú–∞—Ä—à—Ä—É—Ç "${routeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ LLM –∞–Ω–∞–ª–∏–∑`

                if (analysisResult.alternatives?.length > 0) {
                    const methodText = analysisResult.method?.includes('basic') ? '–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç' : 'LLM –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'
                    message += `\n\nüîç ${methodText}:`
                    analysisResult.alternatives.slice(0, 5).forEach(alt => {
                        const altName = smartNavigation.getRouteDisplayName(alt)
                        message += `\n‚Ä¢ ${altName}`
                    })
                }

                const stats = smartNavigation.getAnalysisStats()
                message += `\n\nüìà –î–æ—Å—Ç—É–ø–Ω–æ ${stats.totalRoutes} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ`
                message += `\nüî¨ –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${stats.analysisMethod}`

                if (!stats.llmAvailable) {
                    message += `\n‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω`
                    message += `\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: "–ø—Ä–æ—Ñ–∏–ª—å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–∞–¥–º–∏–Ω"`
                }

                return {
                    success: false,
                    message: message,
                    suggestions: analysisResult.alternatives || []
                }
            }

        } catch (error) {
            return {
                success: false,
                message: `–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${error.message}`,
                error: error
            }
        }
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    findRouteByName(name) {
        const routes = this.getAvailableRoutes()
        return routes.find(route =>
            route.name === name ||
            (route.name && route.name.toLowerCase() === name.toLowerCase())
        )
    }

    findRouteByPath(path) {
        const routes = this.getAvailableRoutes()
        return routes.find(route =>
            route.path === path ||
            route.path.toLowerCase() === path.toLowerCase()
        )
    }

    smartRouteSearch(searchTerm) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        return routesReader.findRouteByTerm(searchTerm)
    }

    getSimilarRoutes(searchTerm, maxResults = 5) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        return routesReader.getRouteSuggestions(searchTerm, maxResults)
    }

    levenshteinDistance(str1, str2) {
        const matrix = []

        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i]
        }

        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j
        }

        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1]
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    )
                }
            }
        }

        return matrix[str2.length][str1.length]
    }

    analyzeCurrentPage() {
        const currentRoute = this.getCurrentRoute()
        const analysis = {
            route: currentRoute,
            pageName: this.getPageDisplayName(currentRoute),
            breadcrumbs: this.generateBreadcrumbs(currentRoute),
            availableActions: this.getAvailablePageActions(currentRoute)
        }

        return analysis
    }

    getPageDisplayName(route) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return routesReader.getPageDisplayName(route)
    }

    generateBreadcrumbs(route) {
        const pathParts = route.path.split('/').filter(part => part)
        const breadcrumbs = [{ name: '–ì–ª–∞–≤–Ω–∞—è', path: '/' }]

        let currentPath = ''
        for (const part of pathParts) {
            currentPath += `/${part}`

            try {
                const foundRoute = routesReader.findRouteByTerm(currentPath)
                const displayName = foundRoute ?
                    routesReader.getPageDisplayName(foundRoute) :
                    this.getPageDisplayName({ path: currentPath })

                breadcrumbs.push({
                    name: displayName || part,
                    path: currentPath
                })
            } catch {
                breadcrumbs.push({
                    name: part,
                    path: currentPath
                })
            }
        }

        return breadcrumbs
    }

    getAvailablePageActions(route) {
        const baseActions = [
            '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
            '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é',
            '–û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É'
        ]

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageSpecificActions = this.getPageSpecificActions(route)

        return [...baseActions, ...pageSpecificActions]
    }

    getPageSpecificActions(route) {
        const routeName = route.name?.toLowerCase() || ''
        const routePath = route.path?.toLowerCase() || ''

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (routeName.includes('user') || routePath.includes('profile') || routeName === 'account') {
            return ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
        }

        if (routeName.includes('admin') || routePath.includes('admin')) {
            return ['–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏', '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö']
        }

        if (routeName.includes('settings') || routePath.includes('settings')) {
            return ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', '–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ']
        }

        if (routeName.includes('files') || routePath.includes('filemanager')) {
            return ['–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É', '–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º']
        }

        if (routeName.includes('project') || routePath.includes('crm')) {
            return ['–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞']
        }

        if (routeName.includes('lms') || routePath.includes('course')) {
            return ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', '–°–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã']
        }

        return []
    }

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    getRoutesByCategory(category) {
        return routesReader.getRoutesByCategory(category)
    }

    getAllCategories() {
        return ['admin', 'cms', 'crm', 'lms', 'bi', 'expert', 'user']
    }

    searchRoutes(query, maxResults = 10) {
        return routesReader.getRouteSuggestions(query, maxResults)
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    async getNavigationStats() {
        return smartNavigation.getAnalysisStats()
    }
}

export const routerActions = new RouterActions()
export default RouterActions 