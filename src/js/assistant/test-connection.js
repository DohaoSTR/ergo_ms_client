import { lmStudioClient } from './lm-studio-client.js'
import { intentAnalyzer } from './intent-analyzer.js'

export async function testConnection() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio...')

    try {
        const result = await lmStudioClient.checkConnection()

        if (result.connected) {
            console.log('‚úÖ LM Studio –ø–æ–¥–∫–ª—é—á–µ–Ω!')
            console.log('üìã –ú–æ–¥–µ–ª—å:', result.model)
            return result
        } else {
            console.log('‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', result.error)
            return result
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
        return { connected: false, error: error.message }
    }
}

export async function testSimpleMessage(message = '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?') {
    console.log('üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', message)

    try {
        const result = await lmStudioClient.sendMessage(message, '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.')

        if (result.success) {
            console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:')
            console.log(result.message)
            console.log('üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', result.usage)
            return result
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', result.error)
            return result
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
        return { success: false, error: error.message }
    }
}

export async function testIntentAnalysis(message = '–ü–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏') {
    console.log('üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:', message)

    try {
        const result = await intentAnalyzer.analyzeIntent(message, {
            currentRoute: '/test',
            currentPage: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            availableRoutes: ['Account', 'Settings', 'UsersPanel'],
            pageComponents: ['TestComponent', 'NavigationComponent']
        })

        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:')
        console.log('- –ù–∞–º–µ—Ä–µ–Ω–∏–µ:', result.intent)
        console.log('- –î–µ–π—Å—Ç–≤–∏–µ:', result.action)
        console.log('- –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message)
        console.log('- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', result.params)

        return result
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message)
        return { success: false, error: error.message }
    }
}

export async function runFullTest() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...\n')

    const results = {
        connection: null,
        simpleMessage: null,
        intentAnalysis: null
    }

    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:')
    results.connection = await testConnection()
    console.log('')

    if (results.connection.connected) {
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:')
        results.simpleMessage = await testSimpleMessage()
        console.log('')

        console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:')
        results.intentAnalysis = await testIntentAnalysis()
        console.log('')
    } else {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã LLM - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    }

    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:')
    console.log('‚îÅ'.repeat(50))
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', results.connection.connected ? '‚úÖ OK' : '‚ùå FAIL')

    if (results.simpleMessage) {
        console.log('–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', results.simpleMessage.success ? '‚úÖ OK' : '‚ùå FAIL')
    }

    if (results.intentAnalysis) {
        console.log('–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:', results.intentAnalysis.success ? '‚úÖ OK' : '‚ùå FAIL')
    }

    console.log('‚îÅ'.repeat(50))

    return results
}

export async function diagnoseCORS() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CORS –ø—Ä–æ–±–ª–µ–º...')

    try {
        const lmStudioUrl = import.meta.env.VITE_LM_STUDIO_URL || 'http://127.0.0.1:1234'
        const response = await fetch(`${lmStudioUrl}/v1/models`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
            },
            mode: 'cors'
        })

        console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
        console.log('üìã Headers:', [...response.headers.entries()])

        if (response.ok) {
            const data = await response.json()
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data)
            return { success: true, data }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.statusText)
            return { success: false, error: response.statusText }
        }

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ CORS –∏–ª–∏ —Å–µ—Ç–∏:', error.message)
        return { success: false, error: error.message }
    }
}

if (typeof window !== 'undefined') {
    window.testLMStudio = {
        testConnection,
        testSimpleMessage,
        testIntentAnalysis,
        runFullTest,
        diagnoseCORS
    }

    console.log('üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LM Studio –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.testLMStudio')
    console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: window.testLMStudio.runFullTest()')
} 